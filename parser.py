from keep_alive import keep_alive
keep_alive()

import requests
from bs4 import BeautifulSoup
import telebot

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7896429991:AAE83suCEXzElC6kOc1KHmlvadslJvNJ6Jo"
bot = telebot.TeleBot(TOKEN)

# ID —Ç–≤–æ–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞
CHANNEL_ID = "@UA_in_DE_news"

# URL —Å–∞–π—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
URL = "https://www.bbc.com/ukrainian"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
def get_article_text(url):
    response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
    if response.status_code != 200:
        return "", ""

    soup = BeautifulSoup(response.text, "html.parser")

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ (–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ <h1>)
    title_tag = soup.find("h1")
    title = title_tag.text.strip() if title_tag else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"

    # –ò—â–µ–º –≤—Å–µ –∞–±–∑–∞—Ü—ã <p> –≤–Ω—É—Ç—Ä–∏ <div>
    article_body = soup.find_all("div")  # –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∫–ª–∞—Å—Å div, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    paragraphs = []
    
    for div in article_body:
        paragraphs.extend(div.find_all("p"))  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ <p> –≤–Ω—É—Ç—Ä–∏ <div>

    if len(paragraphs) < 3:
        return title, ""  # –ï—Å–ª–∏ –Ω–µ—Ç 3 –∞–±–∑–∞—Ü–µ–≤, —Ç–µ–∫—Å—Ç –Ω–µ –±–µ—Ä—ë–º

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 2 –∞–±–∑–∞—Ü–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    selected_paragraphs = paragraphs[:2] + [paragraphs[-1]]
    article_text = "\n".join(p.text.strip() for p in selected_paragraphs)

    return title, article_text

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def get_news():
    response = requests.get(URL, headers={"User-Agent": "Mozilla/5.0"})
    if response.status_code != 200:
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    articles = soup.find_all("h3")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π

    news_list = []
    for article in articles[:1]:  # –ë–µ—Ä—ë–º 1 —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
        link_tag = article.find("a")  # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ h3

        if not link_tag or "href" not in link_tag.attrs:
            continue  # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        link = link_tag["href"]
        if link.startswith("/"):
            link = "https://www.bbc.com" + link

        title, article_text = get_article_text(link)
        if not article_text:
            continue  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        message = f"üì∞ *{title}*\n\n{article_text}\n\nüîó {link}"
        news_list.append(message)
    
    return news_list

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram
def send_news():
    news = get_news()
    if not news:
        return

    for item in news:
        bot.send_message(CHANNEL_ID, item, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
send_news()
